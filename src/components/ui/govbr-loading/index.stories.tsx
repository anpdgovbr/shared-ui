import Box from '@mui/material/Box'
import Button from '@mui/material/Button'
import Typography from '@mui/material/Typography'
import type { Meta, StoryObj } from '@storybook/react'
import { GovBRThemeProvider } from '@theme/GovBRThemeProvider'
import { useState } from 'react'

import { GovBRLoading } from './index'

const meta: Meta<typeof GovBRLoading> = {
  title: 'Components/GovBRLoading',
  component: GovBRLoading,
  tags: ['autodocs'],
  decorators: [
    (Story) => (
      <GovBRThemeProvider>
        <div style={{ position: 'relative', minHeight: '400px' }}>
          <Story />
        </div>
      </GovBRThemeProvider>
    ),
  ],
  parameters: {
    docs: {
      description: {
        component: `
## GovBRLoading

Componente de loading vers√°til da biblioteca ANPD que oferece tr√™s variantes diferentes:

### üéØ Caracter√≠sticas Principais
- **M√∫ltiplas variantes**: Default (tela cheia), Modal (overlay) e Skeleton (adapt√°vel ao container)
- **Sistema de retry inteligente**: Tentativas autom√°ticas com feedback visual
- **Timeout configur√°vel**: Controle total sobre quando acionar a√ß√µes de fallback
- **Acessibilidade**: Suporte completo a screen readers com \`role="alert"\` e \`aria-live\`
- **Responsive**: Funciona perfeitamente em todos os tamanhos de tela

### üì± Variantes Dispon√≠veis

#### Default
Loading em tela cheia com centraliza√ß√£o vertical, ideal para carregamentos principais da aplica√ß√£o.

#### Modal
Overlay elegante com backdrop blur, perfeito para opera√ß√µes que n√£o devem bloquear completamente a interface.

#### Skeleton
Carregamento que se adapta ao container pai, ideal para substituir conte√∫do espec√≠fico durante o carregamento.

### üîÑ Sistema de Retry com Reload Autom√°tico
- **Tentativas autom√°ticas configur√°veis** (m√°ximo 3)
- **Reload da p√°gina**: \`window.location.reload()\` quando \`autoRetry=true\`
- **Feedback visual** do progresso das tentativas  
- **Bot√£o manual de retry** quando esgotadas as tentativas autom√°ticas
- **Verifica√ß√£o de conectividade** antes de tentar novamente
- **‚ö†Ô∏è ATEN√á√ÉO**: Em produ√ß√£o, o \`autoRetry\` ir√° recarregar a p√°gina atual

### üö® Comportamento de Reload
Quando \`autoRetry={true}\` e o timeout √© atingido, o componente executa \`window.location.reload()\` 
que **recarregar√° toda a p√°gina**. No Storybook, isso pode recarregar a pr√≥pria p√°gina de documenta√ß√£o.
        `,
      },
    },
  },
  argTypes: {
    text: {
      control: 'text',
      description: 'Texto exibido durante o carregamento',
      table: {
        category: 'Conte√∫do',
        defaultValue: { summary: 'Carregando...' },
      },
    },
    variant: {
      control: 'select',
      options: ['default', 'modal', 'skeleton'],
      description:
        'Variante do loading: default (tela cheia), modal (overlay) ou skeleton (adapt√°vel)',
      table: {
        category: 'Apar√™ncia',
        defaultValue: { summary: 'default' },
      },
    },
    timeout: {
      control: { type: 'number', min: 1000, max: 30000, step: 1000 },
      description: 'Tempo limite em ms antes de acionar onTimeout ou auto retry',
      table: {
        category: 'Comportamento',
        defaultValue: { summary: '4000' },
      },
    },
    isVisible: {
      control: 'boolean',
      description: 'Controla a visibilidade do componente',
      table: {
        category: 'Estado',
        defaultValue: { summary: 'true' },
      },
    },
    autoRetry: {
      control: 'boolean',
      description:
        '‚ö†Ô∏è ATEN√á√ÉO: Executa window.location.reload() ap√≥s timeout - ir√° recarregar a p√°gina atual!',
      table: {
        category: 'Retry',
        defaultValue: { summary: 'false' },
      },
    },
    enableRetryFeedback: {
      control: 'boolean',
      description: 'Mostra contador de tentativas e bot√£o de retry manual',
      table: {
        category: 'Retry',
        defaultValue: { summary: 'false' },
      },
    },
    onTimeout: {
      action: 'timeout',
      description: 'Callback executado quando o timeout √© atingido',
      table: {
        category: 'Eventos',
      },
    },
    dismissible: {
      control: 'boolean',
      description: 'Permite fechar clicando fora (backdrop click) ou pressionando ESC',
      table: {
        category: 'Intera√ß√£o',
        defaultValue: { summary: 'false' },
      },
    },
    onDismiss: {
      action: 'dismiss',
      description: 'Callback executado quando usu√°rio clica fora ou pressiona ESC',
      table: {
        category: 'Eventos',
      },
    },
    disableEscapeKeyDown: {
      control: 'boolean',
      description: 'Desabilita o fechamento com tecla ESC (apenas quando dismissible=true)',
      table: {
        category: 'Intera√ß√£o',
        defaultValue: { summary: 'false' },
      },
    },
    progress: {
      control: { type: 'range', min: 0, max: 100, step: 1 },
      description: 'Progresso de 0 a 100 para loading com porcentagem (Gov.br DS)',
      table: {
        category: 'Progresso',
        defaultValue: { summary: 'undefined' },
      },
    },
    showProgress: {
      control: 'boolean',
      description: 'Se deve exibir o texto da porcentagem no centro do loading',
      table: {
        category: 'Progresso',
        defaultValue: { summary: 'true' },
      },
    },
    progressLabel: {
      control: 'text',
      description: 'Label customizada para acessibilidade (padr√£o: "carregando com {progress}%")',
      table: {
        category: 'Progresso',
        defaultValue: { summary: 'undefined' },
      },
    },
  },
}

export default meta
type Story = StoryObj<typeof GovBRLoading>

// Story padr√£o - loading em tela cheia (SEM autoRetry para seguran√ßa no Storybook)
export const Default: Story = {
  args: {
    text: 'Carregando dados...',
    timeout: 10000, // Timeout longo para n√£o interferir na demonstra√ß√£o
    isVisible: true,
    autoRetry: false, // DESABILITADO para n√£o recarregar o Storybook
    enableRetryFeedback: false,
    variant: 'default',
  },
  parameters: {
    docs: {
      description: {
        story: `
### Loading Padr√£o (Tela Cheia)

Variante principal que ocupa toda a altura da viewport. Ideal para:
- Carregamento inicial da aplica√ß√£o
- Transi√ß√µes entre p√°ginas principais
- Opera√ß√µes que requerem aten√ß√£o total do usu√°rio

**Caracter√≠sticas:**
- Centraliza√ß√£o vertical e horizontal
- Altura m√≠nima de 100vh
- Indicador circular de progresso
- Suporte a acessibilidade com \`role="alert"\`
        `,
      },
    },
  },
}

// Story modal - overlay elegante
export const Modal: Story = {
  args: {
    text: 'Processando...',
    timeout: 6000,
    isVisible: true,
    variant: 'modal',
  },
  parameters: {
    docs: {
      description: {
        story: `
### Loading Modal (Overlay)

Overlay elegante com backdrop blur que n√£o bloqueia completamente a interface. Ideal para:
- Opera√ß√µes de salvamento
- Uploads de arquivos
- Processamento de formul√°rios
- Chamadas API espec√≠ficas

**Caracter√≠sticas:**
- Backdrop com blur e transpar√™ncia
- Card centralizado com sombra elegante
- Anima√ß√µes suaves de entrada (fadeIn + slideUp)
- Z-index otimizado para sobreposi√ß√µes
        `,
      },
    },
  },
}

// Story que demonstra funcionalidade de dismiss (click outside / ESC)
export const DismissibleModal: Story = {
  args: {
    text: 'Clique fora ou pressione ESC para cancelar',
    timeout: 15000, // Timeout longo para permitir demonstra√ß√£o
    isVisible: true,
    variant: 'modal',
    dismissible: true,
    disableEscapeKeyDown: false,
  },
  render: (args) => {
    const [isVisible, setIsVisible] = useState(false)
    const [dismissCount, setDismissCount] = useState(0)

    const handleShow = () => {
      setIsVisible(true)
    }

    const handleDismiss = () => {
      setIsVisible(false)
      setDismissCount((prev) => prev + 1)
      console.log('Loading cancelado pelo usu√°rio!')
    }

    return (
      <GovBRThemeProvider>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>
          <Box
            sx={{
              p: 2,
              bgcolor: 'info.light',
              color: 'info.contrastText',
              borderRadius: 1,
            }}
          >
            <Typography variant="h6" gutterBottom>
              ‚ú® Modal Dismissible (Click Outside / ESC)
            </Typography>
            <Typography variant="body2">
              Demonstra como permitir que o usu√°rio cancele o loading clicando fora da √°rea ou
              pressionando a tecla ESC. Ideal para opera√ß√µes que podem ser canceladas.
            </Typography>
          </Box>

          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
            <Button variant="contained" onClick={handleShow} disabled={isVisible}>
              Mostrar Loading Cancel√°vel
            </Button>
            {dismissCount > 0 && (
              <Typography variant="body2" color="success.main">
                ‚úÖ Cancelado {dismissCount} {dismissCount === 1 ? 'vez' : 'vezes'}
              </Typography>
            )}
          </Box>

          <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
            üí° <strong>Dica:</strong> Quando o loading aparecer, tente:
            <br />
            ‚Ä¢ Clicar fora da √°rea do loading (backdrop)
            <br />
            ‚Ä¢ Pressionar a tecla ESC
            <br />‚Ä¢ Ambos ir√£o cancelar o loading e chamar onDismiss()
          </Typography>

          <GovBRLoading {...args} isVisible={isVisible} onDismiss={handleDismiss} />
        </Box>
      </GovBRThemeProvider>
    )
  },
  parameters: {
    docs: {
      description: {
        story: `
### ‚ú® Modal Dismissible - Click Outside & ESC Key

Demonstra a funcionalidade de **dismiss** que permite ao usu√°rio cancelar o loading de forma intuitiva.

**üéØ Funcionalidades:**
- **Backdrop Click**: Clicar fora da √°rea do loading cancela a opera√ß√£o
- **ESC Key**: Pressionar tecla ESC cancela o loading  
- **Callback onDismiss**: Permite tratar o cancelamento adequadamente
- **Controle de ESC**: Pode ser desabilitado com \`disableEscapeKeyDown=true\`

**‚úÖ Casos de Uso Ideais:**
- **Uploads de arquivos**: Usu√°rio pode cancelar upload em andamento
- **Busca/Filtros**: Cancelar pesquisas demoradas
- **Opera√ß√µes n√£o-cr√≠ticas**: Permitir escape em processos longos
- **UX melhorada**: Dar controle ao usu√°rio sobre carregamentos

**‚ö†Ô∏è Quando N√ÉO usar:**
- Opera√ß√µes cr√≠ticas que n√£o podem ser interrompidas
- Processos de salvamento importantes
- Autentica√ß√£o/login em andamento
- Transa√ß√µes financeiras

**üìù Implementa√ß√£o:**
\`\`\`tsx
const [loading, setLoading] = useState(true)

const handleCancel = () => {
  setLoading(false)
  // Cancelar requisi√ß√£o HTTP, limpar estado, etc.
}

<GovBRLoading
  variant="modal"
  dismissible={true}
  onDismiss={handleCancel}
  disableEscapeKeyDown={false} // Permite ESC
/>
\`\`\`

**üö® Importante:** Sempre implemente a l√≥gica de cancelamento no \`onDismiss\`:
- Cancele requisi√ß√µes HTTP em andamento
- Limpe estados relacionados  
- Registre a a√ß√£o para analytics se necess√°rio
        `,
      },
    },
  },
}

// Story que demonstra dismiss apenas com backdrop (ESC desabilitado)
export const BackdropOnlyDismiss: Story = {
  args: {
    text: 'Apenas clique fora para cancelar (ESC desabilitado)',
    timeout: 15000,
    isVisible: true,
    variant: 'modal',
    dismissible: true,
    disableEscapeKeyDown: true, // ESC desabilitado
  },
  render: (args) => {
    const [isVisible, setIsVisible] = useState(false)

    return (
      <GovBRThemeProvider>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>
          <Box
            sx={{
              p: 2,
              bgcolor: 'warning.light',
              color: 'warning.contrastText',
              borderRadius: 1,
            }}
          >
            <Typography variant="h6" gutterBottom>
              üéØ Backdrop Only Dismiss
            </Typography>
            <Typography variant="body2">
              Configura√ß√£o onde apenas o clique fora (backdrop) cancela o loading. A tecla ESC est√°
              desabilitada com <code>disableEscapeKeyDown=true</code>.
            </Typography>
          </Box>

          <Button variant="contained" onClick={() => setIsVisible(true)} disabled={isVisible}>
            Mostrar Loading (s√≥ backdrop funciona)
          </Button>

          <Typography variant="body2" color="text.secondary">
            üí° Teste: ESC n√£o funcionar√°, apenas clique fora da √°rea do loading.
          </Typography>

          <GovBRLoading {...args} isVisible={isVisible} onDismiss={() => setIsVisible(false)} />
        </Box>
      </GovBRThemeProvider>
    )
  },
  parameters: {
    docs: {
      description: {
        story: `
### üéØ Backdrop Only Dismiss (ESC Desabilitado)

Varia√ß√£o onde apenas o clique fora funciona, ESC est√° desabilitado.

**Configura√ß√£o:**
\`\`\`tsx
<GovBRLoading
  dismissible={true}
  disableEscapeKeyDown={true} // ESC desabilitado
  onDismiss={handleCancel}
/>
\`\`\`

**Casos de uso:**
- Quando ESC conflita com outros elementos da p√°gina
- Aplica√ß√µes que j√° usam ESC para outras fun√ß√µes
- Quando voc√™ quer controle mais restrito sobre cancelamento
- Interfaces touch/mobile onde ESC n√£o √© relevante
        `,
      },
    },
  },
}

// Story skeleton - adapt√°vel ao container
export const Skeleton: Story = {
  args: {
    text: 'Carregando conte√∫do...',
    timeout: 5000,
    isVisible: true,
    variant: 'skeleton',
  },
  parameters: {
    docs: {
      description: {
        story: `
### Loading Skeleton (Adapt√°vel)

Loading que se adapta perfeitamente ao container pai. Ideal para:
- Substitui√ß√£o de cards durante carregamento
- Loading em se√ß√µes espec√≠ficas da p√°gina
- Componentes que aguardam dados
- √Åreas de conte√∫do din√¢mico

**Caracter√≠sticas:**
- Position absolute que se adapta ao container
- Backdrop semi-transparente
- Altura m√≠nima configur√°vel
- Herda border-radius do container pai
        `,
      },
    },
  },
  decorators: [
    (Story) => (
      <GovBRThemeProvider>
        <Box
          sx={{
            position: 'relative',
            width: 400,
            height: 200,
            border: '1px solid #ddd',
            borderRadius: 2,
            backgroundColor: '#f5f5f5',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          <Box sx={{ color: 'text.secondary', fontSize: '14px', fontStyle: 'italic' }}>
            Container de demonstra√ß√£o
          </Box>
          <Story />
        </Box>
      </GovBRThemeProvider>
    ),
  ],
}

// Story com sistema de retry habilitado (SEM autoRetry para demonstra√ß√£o segura)
export const WithRetrySystem: Story = {
  args: {
    text: 'Conectando ao servidor...',
    timeout: 5000,
    isVisible: true,
    autoRetry: false, // DESABILITADO para demonstra√ß√£o segura no Storybook
    enableRetryFeedback: true,
    variant: 'modal',
  },
  parameters: {
    docs: {
      description: {
        story: `
### Sistema de Retry Inteligente

Demonstra o sistema completo de retry com feedback visual e tentativas autom√°ticas. 

**‚ö†Ô∏è Nota sobre AutoRetry:**
Esta story tem \`autoRetry=false\` para demonstra√ß√£o segura no Storybook. 
Na aplica√ß√£o real, \`autoRetry=true\` executar√° \`window.location.reload()\`.

**Funcionalidades:**
- **Sistema de contagem**: At√© 3 tentativas com feedback visual
- **Contador visual**: Mostra progresso das tentativas  
- **Retry manual**: Bot√£o "Tentar novamente" executa \`window.location.reload()\`
- **Verifica√ß√£o de conectividade**: S√≥ tenta retry se online
- **Timeout configur√°vel**: Flexibilidade no tempo de espera

**Fluxo de Demonstra√ß√£o:**
1. Carregamento inicial com timeout de 5 segundos
2. Ap√≥s timeout, inicia contagem de tentativas
3. Exibe contador "Tentativa X de 3"  
4. Ap√≥s 3 tentativas, mostra bot√£o "Tentar novamente"
5. ‚ö†Ô∏è **O bot√£o manual ir√° recarregar a p√°gina do Storybook!**
        `,
      },
    },
  },
}

// Story que demonstra o comportamento real de reload (‚ö†Ô∏è USO CUIDADOSO)
export const AutoReloadDemo: Story = {
  args: {
    text: '‚ö†Ô∏è ATEN√á√ÉO: Ir√° recarregar esta p√°gina em 8 segundos!',
    timeout: 8000,
    isVisible: false, // INICIA DESABILITADO por seguran√ßa
    autoRetry: true, // ‚ö†Ô∏è ESTE IR√Å RECARREGAR A P√ÅGINA!
    enableRetryFeedback: true,
    variant: 'modal',
  },
  render: (args) => {
    const [isEnabled, setIsEnabled] = useState(false)
    const [countdown, setCountdown] = useState(8)

    const handleEnableReload = () => {
      setIsEnabled(true)
      // Countdown visual para o usu√°rio saber o que est√° acontecendo
      const timer = setInterval(() => {
        setCountdown((prev) => {
          if (prev <= 1) {
            clearInterval(timer)
            return 0
          }
          return prev - 1
        })
      }, 1000)
    }

    return (
      <GovBRThemeProvider>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>
          <Box
            sx={{
              p: 2,
              bgcolor: 'error.light',
              color: 'error.contrastText',
              borderRadius: 1,
              border: '2px solid',
              borderColor: 'error.main',
            }}
          >
            <Typography variant="h6" gutterBottom>
              ‚ö†Ô∏è DEMONSTRA√á√ÉO DE RELOAD REAL
            </Typography>
            <Typography variant="body2" paragraph>
              Esta story demonstra o comportamento real do <code>autoRetry=true</code>.
              <br />
              <strong>ATEN√á√ÉO:</strong> Ao ativar, a p√°gina ser√° recarregada em 8 segundos!
            </Typography>
            <Typography variant="body2" color="error.dark">
              Use apenas para testar o comportamento real do componente.
            </Typography>
          </Box>

          {!isEnabled ? (
            <Button
              variant="contained"
              color="error"
              onClick={handleEnableReload}
              sx={{ alignSelf: 'flex-start' }}
            >
              üö® ATIVAR RELOAD AUTOM√ÅTICO
            </Button>
          ) : (
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h6" color="error">
                Recarregando p√°gina em {countdown} segundos...
              </Typography>
            </Box>
          )}

          <GovBRLoading {...args} isVisible={isEnabled} />
        </Box>
      </GovBRThemeProvider>
    )
  },
  parameters: {
    docs: {
      description: {
        story: `
### ‚ö†Ô∏è Demonstra√ß√£o de Reload Real 

Esta story demonstra o comportamento **real** do \`autoRetry=true\`, que executa \`window.location.reload()\`.

**‚ö†Ô∏è ATEN√á√ÉO - USE COM CUIDADO:**
- Clique em "ATIVAR RELOAD AUTOM√ÅTICO" ir√° **recarregar esta p√°gina** em 8 segundos
- Ideal para testar o comportamento real em ambiente de desenvolvimento
- Em produ√ß√£o, use este recurso para casos onde o reload da aplica√ß√£o √© desejado

**Comportamento:**
1. Timer de 8 segundos √© iniciado
2. Componente mostra loading com timeout
3. Ap√≥s timeout, executa \`window.location.reload()\`
4. **A p√°gina inteira ser√° recarregada**

**Casos de uso reais:**
- Falha de conectividade que requer reinicializa√ß√£o da aplica√ß√£o
- Estados corrompidos que precisam de reload para recuperar
- Atualiza√ß√µes de aplica√ß√£o que requerem refresh
- Recovery autom√°tico de erros cr√≠ticos
        `,
      },
    },
  },
}

// Story interativa para demonstrar controle de visibilidade
export const InteractiveDemo: Story = {
  args: {
    text: 'Opera√ß√£o em andamento...',
    timeout: 8000,
    variant: 'modal',
    enableRetryFeedback: true,
  },
  render: (args) => {
    const [isVisible, setIsVisible] = useState(false)
    const [variant, setVariant] = useState<'default' | 'modal' | 'skeleton'>('modal')
    const [dismissible, setDismissible] = useState(false)
    const [disableESC, setDisableESC] = useState(false)

    return (
      <GovBRThemeProvider>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>
          <Box
            sx={{
              p: 2,
              bgcolor: 'warning.light',
              color: 'warning.contrastText',
              borderRadius: 1,
              mb: 2,
            }}
          >
            <Typography variant="body2">
              <strong>Nota:</strong> Esta demo tem <code>autoRetry=false</code> para seguran√ßa. Para
              testar reload autom√°tico, use a story &quot;AutoReloadDemo&quot; com cuidado.
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
            <Button variant="contained" onClick={() => setIsVisible(!isVisible)} size="small">
              {isVisible ? 'Ocultar' : 'Mostrar'} Loading
            </Button>

            <Button
              variant="outlined"
              onClick={() => setVariant('default')}
              size="small"
              disabled={variant === 'default'}
            >
              Default
            </Button>

            <Button
              variant="outlined"
              onClick={() => setVariant('modal')}
              size="small"
              disabled={variant === 'modal'}
            >
              Modal
            </Button>

            <Button
              variant="outlined"
              onClick={() => setVariant('skeleton')}
              size="small"
              disabled={variant === 'skeleton'}
            >
              Skeleton
            </Button>
          </Box>

          {/* Controles para dismiss - apenas no modal */}
          {variant === 'modal' && (
            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
              <Button
                variant={dismissible ? 'contained' : 'outlined'}
                onClick={() => setDismissible(!dismissible)}
                size="small"
                color="secondary"
              >
                {dismissible ? 'Dismissible ON' : 'Dismissible OFF'}
              </Button>

              {dismissible && (
                <Button
                  variant={disableESC ? 'contained' : 'outlined'}
                  onClick={() => setDisableESC(!disableESC)}
                  size="small"
                  color="warning"
                >
                  {disableESC ? 'ESC Desabilitado' : 'ESC Habilitado'}
                </Button>
              )}
            </Box>
          )}

          <Box
            sx={{
              position: 'relative',
              minHeight: variant === 'skeleton' ? 300 : 200,
              border: variant === 'skeleton' ? '2px dashed #ccc' : 'none',
              borderRadius: variant === 'skeleton' ? 2 : 0,
              backgroundColor: variant === 'skeleton' ? '#f9f9f9' : 'transparent',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            {variant === 'skeleton' && !isVisible && (
              <Box sx={{ color: 'text.secondary', fontStyle: 'italic' }}>
                Container para demonstrar variante Skeleton
              </Box>
            )}

            <GovBRLoading
              {...args}
              isVisible={isVisible}
              variant={variant}
              dismissible={variant === 'modal' ? dismissible : false}
              disableEscapeKeyDown={disableESC}
              onDismiss={() => {
                setIsVisible(false)
                console.log('Loading cancelado pelo usu√°rio!')
              }}
              onTimeout={() => {
                console.log('Timeout atingido!')
                // Na pr√°tica, aqui voc√™ faria algo como mostrar erro ou tentar novamente
              }}
            />
          </Box>
        </Box>
      </GovBRThemeProvider>
    )
  },
  parameters: {
    docs: {
      description: {
        story: `
### Demo Interativo

Demonstra√ß√£o interativa que permite testar todas as variantes e funcionalidades do componente em tempo real.

**‚ö†Ô∏è Modo Seguro:**
Esta demo tem \`autoRetry=false\` para n√£o recarregar o Storybook durante a demonstra√ß√£o.

**Controles dispon√≠veis:**
- **Mostrar/Ocultar**: Controla a visibilidade do loading
- **Bot√µes de variante**: Alterna entre Default, Modal e Skeleton  
- **‚ú® Controles de Dismiss** (apenas Modal): Ativa/desativa cancelamento
  - **Dismissible ON/OFF**: Habilita clique fora + tecla ESC
  - **ESC Habilitado/Desabilitado**: Controla apenas a tecla ESC
- **Timeout configurado**: 8 segundos para demonstrar contador de retry
- **Sistema de retry**: Mostra tentativas sem executar reload

**Experimente:**
1. Clique em "Mostrar Loading" para ativar
2. Troque entre as diferentes variantes
3. **No Modal**: Teste os controles de dismiss
   - Ative "Dismissible ON" e tente clicar fora ou pressionar ESC
   - Desabilite ESC e veja que s√≥ o clique fora funciona
4. Aguarde o timeout para ver o contador de tentativas
5. Observe as diferen√ßas visuais e comportamentais de cada variante
6. **Para testar reload real, use a story "AutoReloadDemo"**
        `,
      },
    },
  },
}

// Story com timeout personalizado
export const CustomTimeout: Story = {
  args: {
    text: 'Opera√ß√£o demorada...',
    timeout: 2000, // Timeout menor para demonstra√ß√£o
    isVisible: true,
    variant: 'modal',
    autoRetry: false,
    enableRetryFeedback: true,
  },
  parameters: {
    docs: {
      description: {
        story: `
### Timeout Personalizado

Demonstra o uso de timeout customizado (2 segundos) com feedback de retry manual.

**Configura√ß√£o:**
- Timeout reduzido para 2 segundos (demonstra√ß√£o)
- Retry autom√°tico desabilitado
- Feedback de retry habilitado
- Bot√£o manual aparece ap√≥s esgotar tentativas

**Ideal para:**
- Opera√ß√µes com tempo limite conhecido
- Testes de timeout em desenvolvimento
- Demonstra√ß√£o do sistema de retry
        `,
      },
    },
  },
}

// Story para diferentes textos e mensagens
export const DifferentMessages: Story = {
  args: {
    text: 'Sincronizando dados com o servidor...',
    timeout: 10000,
    isVisible: true,
    variant: 'default',
  },
  parameters: {
    docs: {
      description: {
        story: `
### Mensagens Personalizadas

Exemplos de diferentes textos para contextos espec√≠ficos:

**Sugest√µes de mensagens:**
- "Carregando dados..." (gen√©rico)
- "Sincronizando com servidor..." (sync)
- "Processando arquivos..." (upload)
- "Validando informa√ß√µes..." (valida√ß√£o)
- "Conectando ao sistema..." (conex√£o)
- "Salvando altera√ß√µes..." (save)
- "Gerando relat√≥rio..." (processamento)

**Dicas:**
- Use verbos no ger√∫ndio para indicar a√ß√£o em andamento
- Seja espec√≠fico sobre o que est√° acontecendo
- Evite mensagens muito longas
- Considere o contexto da opera√ß√£o
        `,
      },
    },
  },
}

// Story que demonstra uso recomendado com onTimeout customizado (SEM reload)
export const RecommendedUsage: Story = {
  args: {
    text: 'Carregando dados...',
    timeout: 6000,
    isVisible: true,
    autoRetry: false,
    enableRetryFeedback: false,
    variant: 'modal',
  },
  render: (args) => {
    const [status, setStatus] = useState<'loading' | 'error' | 'success'>('loading')

    const handleTimeout = () => {
      setStatus('error')
      console.log('Timeout - mostrando erro ao usu√°rio')
    }

    const handleRetry = () => {
      setStatus('loading')
      console.log('Usu√°rio clicou em tentar novamente')
    }

    const handleSuccess = () => {
      setStatus('success')
      console.log('Opera√ß√£o conclu√≠da com sucesso')
    }

    return (
      <GovBRThemeProvider>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>
          <Box
            sx={{
              p: 2,
              bgcolor: 'info.light',
              color: 'info.contrastText',
              borderRadius: 1,
            }}
          >
            <Typography variant="h6" gutterBottom>
              ‚úÖ Uso Recomendado (Sem Reload Autom√°tico)
            </Typography>
            <Typography variant="body2">
              Demonstra como usar o componente com <code>onTimeout</code> personalizado para
              controlar o que acontece ap√≥s o timeout, sem reload autom√°tico da p√°gina.
            </Typography>
          </Box>

          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
            <Button variant="outlined" onClick={handleRetry} size="small">
              Simular Loading
            </Button>
            <Button variant="outlined" onClick={handleSuccess} size="small">
              Simular Sucesso
            </Button>
          </Box>

          {status === 'loading' && <GovBRLoading {...args} onTimeout={handleTimeout} />}

          {status === 'error' && (
            <Box
              sx={{
                p: 3,
                textAlign: 'center',
                bgcolor: 'error.light',
                borderRadius: 1,
              }}
            >
              <Typography variant="h6" color="error.dark" gutterBottom>
                Ops! Algo deu errado
              </Typography>
              <Typography variant="body2" paragraph>
                N√£o foi poss√≠vel carregar os dados. Verifique sua conex√£o e tente novamente.
              </Typography>
              <Button variant="contained" onClick={handleRetry}>
                Tentar Novamente
              </Button>
            </Box>
          )}

          {status === 'success' && (
            <Box
              sx={{
                p: 3,
                textAlign: 'center',
                bgcolor: 'success.light',
                borderRadius: 1,
              }}
            >
              <Typography variant="h6" color="success.dark" gutterBottom>
                ‚úÖ Dados carregados com sucesso!
              </Typography>
              <Typography variant="body2">A opera√ß√£o foi conclu√≠da sem problemas.</Typography>
            </Box>
          )}
        </Box>
      </GovBRThemeProvider>
    )
  },
  parameters: {
    docs: {
      description: {
        story: `
### ‚úÖ Uso Recomendado para a Maioria dos Casos

Esta story demonstra a **forma recomendada** de usar o GovBRLoading na maioria das situa√ß√µes:

**Caracter√≠sticas:**
- \`autoRetry={false}\` - N√£o recarrega a p√°gina automaticamente
- \`onTimeout\` personalizado - Controle total sobre o que acontece ap√≥s timeout
- Estados de erro e sucesso - Interface mais amig√°vel para o usu√°rio
- Feedback claro - Usu√°rio entende o que aconteceu e pode agir

**Vantagens desta abordagem:**
- **Controle total**: Voc√™ decide o que fazer no timeout
- **UX melhor**: Mensagens de erro claras em vez de reload abrupto
- **Flexibilidade**: Pode tentar novamente, mostrar erro, redirecionar, etc.
- **Debugging**: Mais f√°cil de debugar e testar

**Quando usar \`autoRetry=true\`:**
- Erros cr√≠ticos de infraestrutura
- Estados corrompidos que s√≥ se resolvem com refresh
- Atualiza√ß√µes de aplica√ß√£o que requerem reload
- Casos onde o reload √© realmente a melhor solu√ß√£o

**Implementa√ß√£o t√≠pica:**
\`\`\`tsx
const [loading, setLoading] = useState(true)

const handleTimeout = () => {
  setLoading(false)
  // Mostrar mensagem de erro ou tentar novamente
}

<GovBRLoading 
  isVisible={loading}
  onTimeout={handleTimeout}
  autoRetry={false} // Recomendado
/>
\`\`\`
        `,
      },
    },
  },
}

// Story para demonstrar loading com progresso (modo padr√£o)
export const WithProgress: Story = {
  args: {
    text: 'Processando arquivo...',
    progress: 45,
    showProgress: true,
    timeout: 15000,
    isVisible: true,
    variant: 'modal',
  },
  render: (args) => {
    const [progress, setProgress] = useState(0)
    const [isVisible, setIsVisible] = useState(false)

    const startProgress = () => {
      setProgress(0)
      setIsVisible(true)

      // Simula progresso de upload/processamento
      const interval = setInterval(() => {
        setProgress((prev) => {
          const next = prev + Math.random() * 15
          if (next >= 100) {
            clearInterval(interval)
            setTimeout(() => setIsVisible(false), 1000) // Mostra 100% por 1 segundo
            return 100
          }
          return Math.min(next, 100)
        })
      }, 300)
    }

    return (
      <GovBRThemeProvider>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>
          <Box
            sx={{
              p: 2,
              bgcolor: 'primary.light',
              color: 'primary.contrastText',
              borderRadius: 1,
            }}
          >
            <Typography variant="h6" gutterBottom>
              üìä Loading com Progresso (Modo Padr√£o)
            </Typography>
            <Typography variant="body2">
              Demonstra o loading determinado com porcentagem usando componentes Material-UI
              estilizados pelo tema GovBR. Ideal para uploads, downloads e processamentos com
              progresso conhecido.
            </Typography>
          </Box>

          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
            <Button variant="contained" onClick={startProgress} disabled={isVisible}>
              Simular Upload com Progresso
            </Button>
            {!isVisible && progress > 0 && (
              <Typography variant="body2" color="success.main">
                ‚úÖ Conclu√≠do! √öltimo progresso: {Math.round(progress)}%
              </Typography>
            )}
          </Box>

          <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
            üí° <strong>Caracter√≠sticas do Modo Padr√£o:</strong>
            <br />
            ‚Ä¢ CircularProgress MUI com variant=&quot;determinate&quot;
            <br />
            ‚Ä¢ Porcentagem centralizada usando Typography
            <br />
            ‚Ä¢ Estilizado pelo tema GovBR (cores, tamanhos, etc.)
            <br />‚Ä¢ Funciona em todas as variantes: default, modal e skeleton
          </Typography>

          <GovBRLoading
            {...args}
            progress={progress}
            isVisible={isVisible}
            onTimeout={() => setIsVisible(false)}
          />
        </Box>
      </GovBRThemeProvider>
    )
  },
  parameters: {
    docs: {
      description: {
        story: `
### üìä Loading com Progresso - Modo Padr√£o (MUI)

Demonstra o loading determinado usando **Material-UI estilizado pelo tema GovBR**.

**üéØ Caracter√≠sticas:**
- **CircularProgress MUI**: \`variant="determinate"\` com valor controlado
- **Porcentagem centralizada**: Typography no centro do c√≠rculo 
- **Tema GovBR**: Cores e estilos consistentes com o Design System
- **Todas variantes**: Funciona em default, modal e skeleton
- **Responsivo**: Adapta-se automaticamente a diferentes tamanhos

**‚úÖ Casos de Uso Ideais:**
- **Uploads de arquivos**: Mostrar progresso de envio
- **Downloads**: Progresso de baixar arquivos grandes  
- **Processamento**: Opera√ß√µes com progresso conhecido
- **Importa√ß√£o/Exporta√ß√£o**: Processos de dados em lote
- **Sincroniza√ß√£o**: Upload/download de dados

**üì± Suporte Multi-Variante:**
\`\`\`tsx
// Modal com progresso
<GovBRLoading variant="modal" progress={progress} />

// Tela cheia com progresso  
<GovBRLoading variant="default" progress={progress} />

// Skeleton adapt√°vel com progresso
<GovBRLoading variant="skeleton" progress={progress} />
\`\`\`

**üéõÔ∏è Controles Dispon√≠veis:**
- \`progress\`: 0-100 (n√∫mero do progresso)
- \`showProgress\`: true/false (exibir porcentagem)
- \`progressLabel\`: string (label customizada para acessibilidade)

**üöÄ Implementa√ß√£o Simples:**
\`\`\`tsx
const [progress, setProgress] = useState(0)

// Atualizar progresso conforme a opera√ß√£o avan√ßa
const handleProgress = (completedBytes, totalBytes) => {
  const percent = (completedBytes / totalBytes) * 100
  setProgress(percent)
}

<GovBRLoading 
  progress={progress}
  text="Enviando arquivo..."
  variant="modal"
/>
\`\`\`
        `,
      },
    },
  },
}

// Story para demonstrar loading com progresso no modo estrito
export const WithProgressStrict: Story = {
  args: {
    text: 'Carregando dados...',
    progress: 75,
    showProgress: true,
    timeout: 15000,
    isVisible: true,
    strictgovbr: true,
  },
  render: (args) => {
    const [progress, setProgress] = useState(0)
    const [isVisible, setIsVisible] = useState(false)

    const startProgress = () => {
      setProgress(0)
      setIsVisible(true)

      // Simula progresso mais r√°pido para demonstra√ß√£o
      const interval = setInterval(() => {
        setProgress((prev) => {
          const next = prev + Math.random() * 10
          if (next >= 100) {
            clearInterval(interval)
            setTimeout(() => setIsVisible(false), 2000) // Mostra 100% por 2 segundos
            return 100
          }
          return Math.min(next, 100)
        })
      }, 200)
    }

    return (
      <GovBRThemeProvider>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>
          <Box
            sx={{
              p: 2,
              bgcolor: 'warning.light',
              color: 'warning.contrastText',
              borderRadius: 1,
            }}
          >
            <Typography variant="h6" gutterBottom>
              üéØ Loading com Progresso (Modo Estrito Gov.br DS)
            </Typography>
            <Typography variant="body2">
              Demonstra o loading determinado usando **HTML puro e classes CSS oficiais** do Gov.br
              Design System. Renderiza√ß√£o 100% fiel √† especifica√ß√£o oficial.
            </Typography>
          </Box>

          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
            <Button variant="contained" onClick={startProgress} disabled={isVisible}>
              Testar Progresso Oficial Gov.br DS
            </Button>
            {!isVisible && progress > 0 && (
              <Typography variant="body2" color="success.main">
                ‚úÖ Processo finalizado! {Math.round(progress)}%
              </Typography>
            )}
          </Box>

          <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
            üí° <strong>Caracter√≠sticas do Modo Estrito:</strong>
            <br />
            ‚Ä¢ HTML: \`&lt;div class=&quot;br-loading&quot; data-progress=&quot;75&quot;&gt;\`
            <br />
            ‚Ä¢ CSS: Classes e anima√ß√µes oficiais do Gov.br DS
            <br />
            ‚Ä¢ M√°scaras: \`br-loading-mask\` e \`br-loading-fill\`
            <br />
            ‚Ä¢ Rota√ß√£o: Transform baseada no progresso (3.6deg por %)
            <br />‚Ä¢ Porcentagem: \`::after\` com \`content: attr(data-progress) &quot;%&quot;\`
          </Typography>

          {isVisible && (
            <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
              <Typography variant="caption" color="text.secondary" sx={{ fontFamily: 'monospace' }}>
                HTML Renderizado:
              </Typography>
              <Box
                component="pre"
                sx={{
                  fontSize: '0.75rem',
                  color: 'text.secondary',
                  bgcolor: 'grey.100',
                  p: 1,
                  borderRadius: 0.5,
                  overflow: 'auto',
                  fontFamily: 'monospace',
                }}
              >
                {`<div class="br-loading medium" 
     data-progress="${Math.round(progress)}"
     role="progressbar"
     aria-valuenow="${Math.round(progress)}"
     aria-valuemin="0"
     aria-valuemax="100">
  <div class="br-loading-mask full">
    <div class="br-loading-fill"></div>
  </div>
  <div class="br-loading-mask">
    <div class="br-loading-fill"></div>
  </div>
</div>`}
              </Box>
            </Box>
          )}

          <GovBRLoading
            {...args}
            progress={progress}
            isVisible={isVisible}
            onTimeout={() => setIsVisible(false)}
          />
        </Box>
      </GovBRThemeProvider>
    )
  },
  parameters: {
    docs: {
      description: {
        story: `
### üéØ Loading com Progresso - Modo Estrito (Gov.br DS Oficial)

Demonstra o loading determinado usando **HTML puro e CSS oficial** do Gov.br Design System.

**‚ö° Renderiza√ß√£o Oficial Gov.br DS:**
- **HTML Puro**: \`<div class="br-loading" data-progress="75">\`
- **CSS Oficial**: Classes e anima√ß√µes do pacote @govbr-ds/core
- **M√°scaras CSS**: Rota√ß√£o controlada via transform para criar o arco
- **Pseudo-elementos**: Porcentagem via \`::after\` com \`content: attr(data-progress) "%"\`

**üîß Estrutura HTML:**
\`\`\`html
<div class="br-loading" data-progress="75" 
     role="progressbar" aria-valuenow="75"
     aria-valuemin="0" aria-valuemax="100">
  <div class="br-loading-mask full">
    <div class="br-loading-fill"></div>
  </div>
  <div class="br-loading-mask">
    <div class="br-loading-fill"></div>
  </div>
</div>
\`\`\`

**üé® Como Funciona o CSS Gov.br:**
1. **data-progress**: Define o valor e aparece como texto central
2. **br-loading-mask**: M√°scaras para clips circulares  
3. **br-loading-fill**: Elementos que rotacionam para formar o arco
4. **Transform**: Cada 1% = 3.6deg de rota√ß√£o (360¬∞ / 100)
5. **Anima√ß√£o**: \`animation: fill ease-in-out 2s\`

**üìè Tamanhos Dispon√≠veis:**
- **small**: 24px (\`--loading-indetermined-diameter-sm\`)
- **medium**: 44px (\`--loading-indetermined-diameter-md\`) - padr√£o
- **large**: 84px (\`--loading-diameter\`)

**‚úÖ Quando Usar Modo Estrito:**
- **Compliance total** com Gov.br Design System
- **Projetos governamentais** que exigem ader√™ncia oficial
- **Auditoria de acessibilidade** rigorosa
- **Performance cr√≠tica** (CSS puro √© mais leve)

**üöÄ Implementa√ß√£o:**
\`\`\`tsx
<GovBRLoading 
  strictgovbr={true}
  progress={progress}
  size="large"
  progressLabel="Carregando dados da LGPD"
/>
\`\`\`
        `,
      },
    },
  },
}

// Story comparativa entre os dois modos
export const ProgressComparison: Story = {
  args: {
    progress: 60,
    showProgress: true,
    text: 'Processando...',
    isVisible: true,
  },
  render: (args) => {
    const [progress, setProgress] = useState(60)

    const updateProgress = (newProgress: number) => {
      setProgress(Math.max(0, Math.min(100, newProgress)))
    }

    return (
      <GovBRThemeProvider>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3, p: 3 }}>
          <Typography variant="h5" gutterBottom>
            ‚öñÔ∏è Compara√ß√£o: Modo Padr√£o vs Modo Estrito
          </Typography>

          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>
            <Typography variant="body2">Progresso:</Typography>
            <Button size="small" onClick={() => updateProgress(0)}>
              0%
            </Button>
            <Button size="small" onClick={() => updateProgress(25)}>
              25%
            </Button>
            <Button size="small" onClick={() => updateProgress(50)}>
              50%
            </Button>
            <Button size="small" onClick={() => updateProgress(75)}>
              75%
            </Button>
            <Button size="small" onClick={() => updateProgress(100)}>
              100%
            </Button>
            <Typography variant="body2" sx={{ ml: 2, fontWeight: 'bold' }}>
              Atual: {progress}%
            </Typography>
          </Box>

          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3 }}>
            {/* Modo Padr√£o */}
            <Box sx={{ p: 3, border: 1, borderColor: 'primary.main', borderRadius: 2 }}>
              <Typography variant="h6" color="primary.main" gutterBottom>
                üé® Modo Padr√£o (Material-UI)
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                <strong>strictgovbr={'{false}'}</strong> - MUI + Tema GovBR
              </Typography>

              <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
                <GovBRLoading
                  {...args}
                  progress={progress}
                  variant="modal"
                  strictgovbr={false}
                  isVisible={true}
                />
              </Box>

              <Typography variant="caption" color="text.secondary">
                ‚úÖ <strong>Caracter√≠sticas:</strong>
                <br />
                ‚Ä¢ CircularProgress MUI determinado
                <br />
                ‚Ä¢ Typography para porcentagem
                <br />
                ‚Ä¢ Estilizado pelo govbrTheme.ts
                <br />‚Ä¢ Suporte a todas variantes
              </Typography>
            </Box>

            {/* Modo Estrito */}
            <Box sx={{ p: 3, border: 1, borderColor: 'warning.main', borderRadius: 2 }}>
              <Typography variant="h6" color="warning.main" gutterBottom>
                üéØ Modo Estrito (Gov.br DS)
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                <strong>strictgovbr={'{true}'}</strong> - HTML + CSS Oficial
              </Typography>

              <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
                <GovBRLoading {...args} progress={progress} strictgovbr={true} isVisible={true} />
              </Box>

              <Typography variant="caption" color="text.secondary">
                ‚úÖ <strong>Caracter√≠sticas:</strong>
                <br />
                ‚Ä¢ HTML: \`&lt;div class=&quot;br-loading&quot;&gt;\`
                <br />
                ‚Ä¢ CSS: Classes oficiais Gov.br DS
                <br />
                ‚Ä¢ M√°scaras e pseudo-elementos
                <br />‚Ä¢ 100% conforme especifica√ß√£o
              </Typography>
            </Box>
          </Box>

          <Box sx={{ p: 2, bgcolor: 'info.light', borderRadius: 1 }}>
            <Typography variant="body2" color="info.contrastText">
              <strong>üí° Dica:</strong> Ambos os modos suportam progresso, mas t√™m implementa√ß√µes
              diferentes. O modo padr√£o oferece mais flexibilidade de estilo, enquanto o modo
              estrito garante conformidade total com o Gov.br Design System.
            </Typography>
          </Box>
        </Box>
      </GovBRThemeProvider>
    )
  },
  parameters: {
    docs: {
      description: {
        story: `
### ‚öñÔ∏è Compara√ß√£o Lado a Lado: Modo Padr√£o vs Estrito

Esta story permite **comparar diretamente** as duas implementa√ß√µes de loading com progresso.

**üîç Principais Diferen√ßas:**

| Aspecto | Modo Padr√£o (MUI) | Modo Estrito (Gov.br DS) |
|---------|------------------|---------------------------|
| **HTML** | MUI Components | \`<div class="br-loading">\` |
| **CSS** | Tema + MUI Styles | Classes oficiais Gov.br |
| **Porcentagem** | Typography centralizada | \`::after\` com \`content: attr()\` |
| **Anima√ß√£o** | MUI CircularProgress | CSS transforms + keyframes |
| **Customiza√ß√£o** | Alta (tema MUI) | Limitada (Gov.br oficial) |
| **Performance** | Boa (React/MUI) | Melhor (CSS puro) |
| **Compliance** | Boa (visual similar) | Total (implementa√ß√£o oficial) |

**üéØ Quando Usar Cada Modo:**

**Modo Padr√£o (recomendado para maioria):**
- Projetos que j√° usam Material-UI
- Necessidade de customiza√ß√£o avan√ßada
- Integra√ß√£o com temas existentes
- Prototipagem r√°pida

**Modo Estrito (governamental/oficial):**
- Projetos do setor p√∫blico
- Auditoria de compliance rigorosa  
- Performance cr√≠tica
- Ader√™ncia 100% ao Gov.br DS

**üöÄ Como escolher:**
\`\`\`tsx
// Para a maioria dos casos
<GovBRLoading progress={progress} />

// Para projetos governamentais oficiais  
<GovBRLoading strictgovbr progress={progress} />
\`\`\`

**üîß Props Comuns:**
Ambos os modos suportam as mesmas props de progresso:
- \`progress\`: 0-100
- \`showProgress\`: boolean  
- \`progressLabel\`: string (acessibilidade)
        `,
      },
    },
  },
}
